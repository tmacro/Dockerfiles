{{ $local := . }}
global
	daemon
	maxconn 4096
	pidfile /var/run/haproxy.pid
	tune.ssl.default-dh-param 4096
	log 127.0.0.1	 local1 debug
	ssl-default-bind-options force-tlsv12
	ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256

defaults
	log global
	mode http
	option dontlognull
	retries 3
	option redispatch
	option http-server-close
	maxconn 2000
	timeout connect 5s
	timeout connect 5000
	timeout client  50000
	timeout server  50000

# Enable stats page on port 1936
listen stats
	bind *:1936
	mode http
	stats enable
	stats hide-version
	#stats realm Haproxy\ Statistics
	stats uri /
	#stats auth Username:Password
	stats refresh 5s

frontend public
	bind *:80								# Bind to port 80
	option forwardfor						# Enable X-Forwarded-For
	errorfile 503 /etc/haproxy/503.http 	# Setup 503 page

    {{ if $local.Env.WT_HTTPS_ENABLED }}	# Bind to 443 if HTTPS is enabled
	bind *:443 ssl crt /etc/haproxy/certs.d
	{{ end }}

	{{ if $local.Env.WT_HTTPS_REDIR }}		# Enable HTTP -> HTTP redirect if set
	acl is-http      ssl_fc,not
	http-request redirect scheme https if is-http
	{{ end }}

	{{ if $local.Env.WT_STRICT }}
	acl has_domain hdr_dom(host) -m end .{{ $local.Env.WT_ROOT }}
	http-request deny if !has_domain
	{{ end }}

{{ if gt (len $containers) 0 }}

	{{ range $group, $grouped_services := groupBy $containers "Env.WT_GROUP" }} {{/* First we'll deal with groups so get them */}}
	{{ range $alias, $hosts := groupBy $grouped_services "Env.WT_ALIAS" }}	{{/* Iter over the aliases in the group */}}
	{{ with $host := index $hosts 0}}						{{/* Take the first one */}}

	{{ if $host.Env.WT_SUBDOMAIN }} {{/* Add our ACL for subdomain based routing if needed eg <alias>.<group>.example.com */}}
	acl host_{{ $group }}_{{ $alias }}_subdomain hdr_dom(host) -i -m str {{ $alias }}.{{ $group }}.{{ $local.Env.WT_ROOT }}
	use_backend bcknd_{{ $group }}_{{ $alias }} if host_{{ $group }}_{{ $alias }}_subdomain {{/* Add our mapping */}}
	{{ end }}

	{{ if $host.Env.WT_URI }} {{/* Add our ACL for uri based routing eg example.com/<group/<alias>/ */}}
	acl host_{{ $group }}_{{ $alias }}_uri path_beg /{{ $group }}/{{ $alias }}/
	use_backend bcknd_{{ $group }}_{{ $alias }} if host_{{ $group }}_{{ $alias }}_uri {{/* Add our mapping */}}
	{{ end }}

	{{ end }} {{/* End with $host */}}
	{{ end }} {{/* End range $alias */}}
	{{ end }} {{/* End range $group */}}

	{{ with $toplvl_services := whereNotExist $containers "Env.WT_GROUP" }} {{/* Now grab everything without a group */}}
	{{ range $alias, $hosts := groupBy $toplvl_services "Env.WT_ALIAS" }}	{{/* Iter over the aliases */}}
	{{ with $host := index $hosts 0}}						{{/* Take the first one */}}

	{{ if $host.Env.WT_SUBDOMAIN }} {{/* Add our ACL for subdomain based routing if needed eg <alias>.<group>.example.com */}}
	acl host_{{ $alias }}_subdomain hdr_dom(host) -i -m str {{ $alias }}.{{ $local.Env.WT_ROOT }}
	use_backend bcknd_{{ $alias }} if host_{{ $alias }}_subdomain {{/* Add our mapping */}}
	{{ end }}

	{{ if $host.Env.WT_URI }} {{/* Add our ACL for uri based routing eg example.com/<group/<alias>/ */}}
	acl host_{{ $alias }}_uri path_beg /{{ $alias }}/
	use_backend bcknd_{{ $alias }} if host_{{ $alias }}_uri {{/* Add our mapping */}}
	{{ end }}

	{{ end }} {{/* End with $host */}}
	{{ end }} {{/* End range $alias */}}
	{{ end }} {{/* End with $toplvl_services */}}

	{{ range $group, $grouped_backends := groupBy $containers "Env.WT_GROUP" }} {{/* First we'll deal with groups so get them */}}
	{{ range $alias, $backends := groupBy $grouped_backends "Env.WT_ALIAS" }}	{{/* Iter over the aliases in the group */}}
backend bcknd_{{ $group }}_{{ $alias }}
	{{ range $backend := $backends }}

	{{ if $backend.Env.WT_PORT }} {{/* If the container defines a port */}}
	{{ with $network := $backend.Networks | first }} {{/* Grab it and add the container as a server */}}
	server srv_{{printf "%.*s" 12 $backend.ID}} {{ $network.IP }}:{{ $backend.Env.WT_PORT }} check inter 2s rise 3 fall 2
	{{ end }}
	{{ end }}

	{{ end }} {{/* End range $backend */}}
	{{ end }} {{/* End range $alias */}}
	{{ end }} {{/* End range $group */}}

	{{ with $toplvl_backends := whereNotExist $containers "Env.WT_GROUP" }} {{/* Now grab everything without a group */}}
	{{ range $alias, $backends := groupBy $toplvl_backends "Env.WT_ALIAS" }}	{{/* Iter over the aliases */}}
backend bcknd_{{ $alias }}
	{{ range $backend := $backends }}

	{{ if $backend.Env.WT_PORT }} {{/* If the container defines a port */}}
	{{ with $network := $backend.Networks | first }} {{/* Grab it and add the container as a server */}}
	server srv_{{printf "%.*s" 12 $backend.ID}} {{ $network.IP }}:{{ $backend.Env.WT_PORT }} check inter 2s rise 3 fall 2
	{{ end }}
	{{ end }}

	{{ end }} {{/* End range $backend */}}
	{{ end }} {{/* End range $alias */}}
	{{ end }} {{/* End with $toplvl_backends */}}

{{ end }} {{/* End if $containers */}}
{{ end }} {{/* End with $containers */}}