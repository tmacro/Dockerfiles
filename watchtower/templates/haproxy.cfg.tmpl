{{ $local := . }}
global
	daemon
	maxconn 4096
	pidfile /var/run/haproxy.pid
	tune.ssl.default-dh-param 4096
	log 127.0.0.1	 local1 debug
	ssl-default-bind-options force-tlsv12
	ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256

defaults
	log global
	mode http
	option dontlognull
	retries 3
	option redispatch
	option http-server-close
	maxconn 2000
	timeout connect 5s
	timeout client 15min
	timeout server 15min

# Enable stats page on port 1936
listen stats
	bind *:1936
	mode http
	stats enable
	stats hide-version
	#stats realm Haproxy\ Statistics
	stats uri /
	#stats auth Username:Password
	stats refresh 5s

frontend public
	bind *:80								# Bind to port 80
	option forwardfor						# Enable X-Forwarded-For
	errorfile 503 /etc/haproxy/503.http 	# Setup 503 page

    {{ if $local.Env.WT_HTTPS_ENABLED }}	# Bind to 443 if HTTPS is enabled
	bind *:443 ssl crt /etc/haproxy/certs.d
	{{ end }}

	{{ if $local.Env.WT_HTTPS_REDIR }}		# Enable HTTP -> HTTP redirect if set
	acl is-http      ssl_fc,not
	http-request redirect scheme https if is-http
	{{ end }}

	{{ range $host, $containers := groupBy $ "Env.WT_ALIAS" }}	# Iter over containers
	{{ with $value := index $containers 0}}						# Take first in group
		{{ if $value.Env.WT_SUBDOMAIN }}
			# ACL for subdomain based routing eg myservice.example.com
			acl host_{{ $host }}_sub hdr_dom(host) -i {{ $host }}
			# If so use the matching backend
			use_backend bcknd_{{ $host }} if host_{{ $host }}_sub
		{{ end }}

		{{ if $value.Env.WT_URI }}
			# ACL for path based routing eg example.com/myservice/
			acl host_{{ $host }}_uri path_beg /{{ $host }}/
			# If so use the matching backend
			use_backend bcknd_{{ $host }} if host_{{ $host }}_uri
		{{ end }}
	{{ end }}
	{{ end }}

	{{ range $host, $containers := groupBy $ "Env.WT_ALIAS" }} 			# Iter over containers, group by Alias
	backend bcknd_{{ $host }}											# Create our backend
		{{ range $container := $containers }}							# Iter over group
	{{ if and $container.Env.WT_ALIAS $container.Env.WT_PORT }}			# If the container defines a port
	{{ with $network := $container.Networks | first }}					# Grab it and add the container as a server
	server srv_{{printf "%.*s" 12 $container.ID}} {{ $network.IP }}:{{ $container.Env.WT_PORT }} check inter 2s rise 3 fall 2
	{{ end }}
	{{ end }}
	{{ end }}
{{ end }}
